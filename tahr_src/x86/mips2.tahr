%{
        #include "utils.h"
%}
%x in_data
%x in_global
%%
%token ADD_R_R,SUB_R_R,SUBU_R_R,ADD_R_I,MUL_R_R,DIV_R_R,LOAD_DW,LOAD_W,LOAD_H,LOAD_B,STORE_D,STORE_W,STORE_H,STORE_B,MOVE_H,MOVE_L,AND_R_R,AND_R_I,OR_R_R,OR_R_I,XOR_R_R,NOR_R_R,SET_L_R_R,SET_L_R_R_U,SET_L_R_I,SHIFT_L,SHIFT_R,BRANCH_EQ_R_R,BRANCH_NEQ_R_R,JUMP,JUMP_R,CALL,CODE_LABEL,SYSCALL,LA_R_A,DATA,ADDU_R_I,MOVE,SEH,ADDU_R_R,NOP,DADD_R_R,DADDU_R_R,DADD_R_I,DADDU_R_I,DECL,LUI_R_M,DADDIU_R_M,DSLL,BALC,LOAD_I,BRANCH_NEZ_C,BRANCH_COM,BRANCH_NEQ_C,BRANCH_GTZ_C,BRANCH_GE_C,SHIFT_R_ARIT,BRANCH_LT_C,BRANCH_EQZ_C,DSRL,BRANCH_LTZ_C,JUMP_R_C,BRANCH_GEZ_C,TEQ,DSUBU_R_R,MUH_R_R,OR_R_I_HEX,AND_R_I_HEX,LOAD_DW_LAB,LOAD_W_LAB,STORE_D_LAB,STORE_W_LAB,BRANCH_EQ_C,BRANCH_LTU_C,LOAD_B_U,BRANCH_GEU_C;
%attribute reg,char*,"$zero","$at","$v0","$v1","$a0","$a1","$a2","$a3","$t0","$t1","$t2","$t3","$t4","$t5","$t6","$t7","$t8","$t9","$s0","$s1","$s2","$s3","$s4","$s5","$s6","$s7","$k0","$k1","$sp","$ra","$fp","HI","LO","PC";
%attribute dtype,char*,".word",".half",".byte",".float",".asciiz",".ascii"{BEGIN(in_data);};
%attribute directive,char*,"%highest","%hi","%lo","%higher";
%attribute num,int;
%attribute hex,long,!![ ]*0x[a-f0-9]+!!;
%attribute label,char*,!![\.]*[a-zA-Z0-9_$]+[:]*!!;
%attribute glob,char*,".globl"{BEGIN(in_global);};
%attribute labg,char*,!!<in_global>[\.a-zA-Z0-9_$]!!{BEGIN(0);};
%attribute dvalue,char*,!!<in_data>([^"\n"].*)!!{BEGIN(0);};
// MIPS Isa
%symbol jump_r_c,reg,reg1;
%symbol teq,reg,reg1,reg,reg2;
%symbol branch_ltz_c,reg,reg1,label,target;
%symbol dsrl,reg,dest,reg,reg1,num,imm;
%symbol branch_gez_c,reg,reg1,label,target;
%symbol branch_eqz_c,reg,reg1,label,target;
%symbol branch_eq_c,reg,reg1,reg,reg2,label,target;
%symbol branch_lt_c,reg,reg1,reg,reg2,label,target;
%symbol branch_ltu_c,reg,reg1,reg,reg2,label,target;
%symbol shift_ra,reg,dest,reg,reg1,num,imm;
%symbol branch_ge_c,reg,reg1,reg,reg2,label,target;
%symbol branch_geu_c,reg,reg1,reg,reg2,label,target;
%symbol branch_neq_c,reg,reg1,reg,reg2,label,target;
%symbol branch_gtz_c,reg,reg1,label,target;
%symbol subu_r_r,reg,reg1,reg,reg2,reg,dest;
%symbol branch_c,label,target;
%symbol branch_nez_c,reg,reg1,label,target;
%symbol balc,label,target;
%symbol load_i,reg,dest,num,imm;
%symbol add_r_r,reg,reg1,reg,reg2,reg,dest;
%symbol dadd_r_r,reg,reg1,reg,reg2,reg,dest;
%symbol addu_r_r,reg,reg1,reg,reg2,reg,dest;
%symbol daddu_r_r,reg,reg1,reg,reg2,reg,dest;
%symbol dsubu_r_r,reg,reg1,reg,reg2,reg,dest;
%symbol la_r_a,reg,reg1,label,target;
%symbol sub_r_r,reg,reg1,reg,reg2,reg,dest;
%symbol add_r_i,reg,reg1,num,imm,reg,dest;
%symbol dadd_r_i,reg,reg1,num,imm,reg,dest;
%symbol daddiu_r_m,reg,dest,reg,reg1,directive,dir,label,lab;
%symbol lui_r_m,reg,dest,directive,dir,label,lab;
%symbol dsll,reg,dest,reg,reg1,num,imm;
%symbol addu_r_i,reg,reg1,num,imm,reg,dest;
%symbol daddu_r_i,reg,reg1,num,imm,reg,dest;
%symbol mul_r_r,reg,reg1,reg,reg2,reg,dest;
%symbol div_r_r,reg,reg1,reg,reg2,reg,dest;
%symbol load_dw,reg,dest,num,offset,reg,base;
%symbol load_dw_lab,directive,dir,reg,dest,label,lab,reg,base;
%symbol load_w,reg,dest,num,offset,reg,base;
%symbol load_w_lab,directive,dir,reg,dest,label,lab,reg,base;
%symbol load_h,reg,dest,num,offset,reg,base;
%symbol load_b,reg,dest,num,offset,reg,base;
%symbol load_b_u,reg,dest,num,offset,reg,base;
%symbol store_d,reg,source,num,offset,reg,base;
%symbol store_d_lab,directive,dir,reg,src,label,lab,reg,base;
%symbol store_w,reg,source,num,offset,reg,base;
%symbol store_w_lab,directive,dir,reg,src,label,lab,reg,base;
%symbol store_h,reg,source,num,offset,reg,base;
%symbol store_b,reg,source,num,offset,reg,base;
%symbol muh_r_r,reg,reg1,reg,reg2,reg,dest;
%symbol move,reg,dest,reg,src;
%symbol move_h,reg,dest;
%symbol move_l,reg,dest;
%symbol and_r_r,reg,reg1,reg,reg2,reg,dest;
%symbol and_r_i,reg,reg1,num,imm,reg,dest;
%symbol and_r_i_hex,reg,reg1,hex,imm,reg,dest;
%symbol or_r_r,reg,reg1,reg,reg2,reg,dest;
%symbol or_r_i,reg,reg1,num,imm,reg,dest;
%symbol or_r_i_hex,reg,reg1,hex,imm,reg,dest;
%symbol xor_r_r,reg,reg1,reg,reg2,reg,dest;
%symbol nor_r_r,reg,reg1,reg,reg2,reg,dest;
%symbol seh,reg,dest,reg,reg1;
%symbol set_l_r_r,reg,reg1,reg,reg2,reg,dest;
%symbol set_l_r_r_u,reg,reg1,reg,reg2,reg,dest;
%symbol set_l_r_i,reg,reg1,num,imm,reg,dest;
%symbol shift_l,reg,reg1,num,imm,reg,dest;
%symbol shift_r,reg,reg1,num,imm,reg,dest;
%symbol branch_eq_r_r,reg,reg1,label,address,reg,reg2;
%symbol branch_neq_r_r,reg,reg1,label,address,reg,reg2;
%symbol jump,label,address;
%symbol jump_r,reg,reg1;
%symbol call,label,address;
%symbol syscall;
%symbol nop;
//Utilities
%symbol code_label,label,text;
%symbol decl,glob,visibility,labg,name;
%symbol data,label,name,dtype,type,dvalue,val;
%%
STORE_D_LAB: "sd" " " src "," dir "(" lab ")" "(" base ")" ;
STORE_W_LAB: "sw" " " src "," dir "(" lab ")" "(" base ")" ;
LOAD_W_LAB: "lw" " " dest "," dir "(" lab ")" "(" base ")" ;
LOAD_DW_LAB: "ld" " " dest "," dir "(" lab ")" "(" base ")" ;
OR_R_I_HEX: "ori" " " dest "," reg1 "," imm ;
AND_R_I_HEX: "andi" " " dest "," reg1 "," imm ;
// Repr section
MUH_R_R: "muh" " " dest "," reg1 "," reg2 ;
TEQ: "teq" " " reg1 "," reg2 ;
BRANCH_GEZ_C: "bgezc" " " reg1 "," target ;
JUMP_R_C: "jrc" " " reg1 ;
BRANCH_LTZ_C: "bltzc" " " reg1 "," target ;
DSRL: "dsrl" " " dest "," reg1 "," imm ;
BRANCH_EQZ_C: "beqzc" " " reg1 "," target ;
BRANCH_EQ_C: "beqc" " " reg1 "," reg2 "," target ;
BRANCH_LT_C: "bltc" " " reg1 "," reg2 "," target ;
BRANCH_LTU_C: "bltuc" " " reg1 "," reg2 "," target ;
SHIFT_R_ARIT: "sra" " " dest "," reg1 "," imm ;
BRANCH_GE_C: "bgec" " " reg1 "," reg2 "," target ;
BRANCH_GEU_C: "bgeuc" " " reg1 "," reg2 "," target ;
BRANCH_NEQ_C: "bnec" " " reg1 "," reg2 "," target ;
BRANCH_GTZ_C: "bgtzc" " " reg1 "," target ;
SUBU_R_R: "subu" " " dest "," reg1 "," reg2 ;
BRANCH_COM: "bc" " " target ;
BRANCH_NEZ_C: "bnezc" " " reg1 "," target ;
LOAD_I: "li" " " dest "," imm ;
BALC: "balc" " " target ;
DADDIU_R_M: "daddiu" " " dest "," reg1 "," dir "(" lab ")" ;
LUI_R_M: "lui" " " dest "," dir "(" lab ")" ;
DSLL: "dsll" " " dest "," reg1 "," imm ;
DECL: visibility " " name ;
NOP: "nop" ;
DADDU_R_I: "daddiu" " " dest "," reg1 "," imm ;
DADDU_R_R: "daddu" " " dest "," reg1 "," reg2 ;
DSUBU_R_R: "dsubu" " " dest "," reg1 "," reg2 ;
ADDU_R_I: "addiu" " " dest "," reg1 "," imm ;
ADDU_R_R: "addu" " " dest "," reg1 "," reg2 ;
SEH: "seh" " " dest "," reg1 ;
MOVE: "move" " " dest "," src ;
DATA: name " " type " " val ;
LA_R_A: "la" " " reg1 "," target ;
SYSCALL: "syscall" ;
CODE_LABEL: text ;
MUL_R_R: "mul" " " dest "," reg1 "," reg2 ;
ADD_R_R: "add" " " dest "," reg1 "," reg2 ;
DADD_R_R: "dadd" " " dest "," reg1 "," reg2 ;
SUB_R_R: "sub" " " dest "," reg1 "," reg2 ;
ADD_R_I: "addi" " " dest "," reg1 "," imm ;
DADD_R_I: "daddi" " " dest "," reg1 "," imm ;
DIV_R_R: "div" " " dest "," reg1 "," reg2 ;
LOAD_DW: "ld" " " dest "," offset "(" base ")" ;
LOAD_W: "lw" " " dest "," offset "(" base ")" ;
LOAD_H: "lh" " " dest "," offset "(" base ")" ;
LOAD_B: "lb" " " dest "," offset "(" base ")" ;
LOAD_B_U: "lbu" " " dest "," offset "(" base ")" ;
STORE_D: "sd" " " source "," offset "(" base ")" ;
STORE_W: "sw" " " source "," offset "(" base ")" ;
STORE_H: "sh" " " source "," offset "(" base ")" ;
STORE_B: "sb" " " source "," offset "(" base ")" ;
MOVE_H: "mfhi" " " dest ;
MOVE_L: "mflo" " " dest ;
AND_R_R: "and" " " dest "," reg1 "," reg2 ;
AND_R_I: "andi" " " dest "," reg1 "," imm ;
OR_R_R: "or" " " dest "," reg1 "," reg2 ;
OR_R_I: "ori" " " dest "," reg1 "," imm ;
XOR_R_R: "xor" " " dest "," reg1 "," reg2 ;
NOR_R_R: "nor" " " dest "," reg1 "," reg2 ;
SET_L_R_R: "slt" " " dest "," reg1 "," reg2 ;
SET_L_R_R_U: "sltu" " " dest "," reg1 "," reg2 ;
SET_L_R_I: "slti" " " dest "," reg1 "," imm ;
SHIFT_L: "sll" " " dest "," reg1 "," imm ;
SHIFT_R: "srl" " " dest "," reg1 "," imm ;
BRANCH_EQ_R_R: "beq" " " reg1 "," reg2 "," address ;
BRANCH_NEQ_R_R: "bne" " " reg1 "," reg2 "," address ;
JUMP: "j" " " address ;
JUMP_R: "jr" " " reg1 ;
CALL: "jal" " " address ;
%%
store_w_lab -> STORE_W_LAB;
store_d_lab -> STORE_D_LAB;
load_w_lab -> LOAD_W_LAB;
load_dw_lab -> LOAD_DW_LAB;
or_r_i_hex -> OR_R_I_HEX;
and_r_i_hex -> AND_R_I_HEX;
muh_r_r -> MUH_R_R;
teq -> TEQ;
branch_gez_c -> BRANCH_GEZ_C;
jump_r_c -> JUMP_R_C;
branch_ltz_c -> BRANCH_LTZ_C;
dsrl -> DSRL;
branch_eqz_c -> BRANCH_EQZ_C;
branch_eq_c -> BRANCH_EQ_C;
branch_lt_c -> BRANCH_LT_C;
branch_ltu_c -> BRANCH_LTU_C;
shift_ra -> SHIFT_R_ARIT;
branch_ge_c -> BRANCH_GE_C;
branch_geu_c -> BRANCH_GEU_C;
branch_gtz_c -> BRANCH_GTZ_C;
branch_neq_c -> BRANCH_NEQ_C;
subu_r_r -> SUBU_R_R;
branch_c -> BRANCH_COM;
branch_nez_c -> BRANCH_NEZ_C;
load_i -> LOAD_I;
balc -> BALC;
daddiu_r_m -> DADDIU_R_M;
lui_r_m -> LUI_R_M;
dsll -> DSLL;
nop -> NOP;
seh -> SEH;
addu_r_i -> ADDU_R_I;
addu_r_r -> ADDU_R_R;
daddu_r_i -> DADDU_R_I;
daddu_r_r -> DADDU_R_R;
dsubu_r_r -> DSUBU_R_R;
move -> MOVE;
data -> DATA;
decl -> DECL;
code_label -> CODE_LABEL;
add_r_r -> ADD_R_R;
dadd_r_r -> DADD_R_R;
sub_r_r -> SUB_R_R;
dadd_r_i -> DADD_R_I;
add_r_i -> ADD_R_I;
mul_r_r -> MUL_R_R;
div_r_r -> DIV_R_R;
load_dw -> LOAD_DW;
load_w -> LOAD_W;
load_h -> LOAD_H;
load_b -> LOAD_B;
load_b_u -> LOAD_B_U;
store_d -> STORE_D;
store_w -> STORE_W;
store_h -> STORE_H;
store_b -> STORE_B;
move_h -> MOVE_H;
move_l -> MOVE_L;
and_r_i -> AND_R_I;
and_r_r -> AND_R_R;
or_r_r -> OR_R_R;
or_r_i -> OR_R_I;
xor_r_r -> XOR_R_R;
nor_r_r -> NOR_R_R;
set_l_r_r -> SET_L_R_R;
set_l_r_r_u -> SET_L_R_R_U;
set_l_r_i -> SET_L_R_I;
shift_l -> SHIFT_L;
shift_r -> SHIFT_R;
branch_eq_r_r -> BRANCH_EQ_R_R;
branch_neq_r_r -> BRANCH_NEQ_R_R;
jump -> JUMP;
jump_r -> JUMP_R;
call -> CALL;
syscall -> SYSCALL;
la_r_a -> LA_R_A;
%%
// Empty translation section
